# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.alert_integration import AlertIntegration
from openapi_server.models.alert_report import AlertReport
from openapi_server.models.responder import Responder
from openapi_server import util

from openapi_server.models.alert_integration import AlertIntegration  # noqa: E501
from openapi_server.models.alert_report import AlertReport  # noqa: E501
from openapi_server.models.responder import Responder  # noqa: E501

class BaseAlert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, tiny_id=None, alias=None, message=None, status=None, acknowledged=None, is_seen=None, tags=None, snoozed=None, snoozed_until=None, count=None, last_occurred_at=None, created_at=None, updated_at=None, source=None, owner=None, priority=None, responders=None, integration=None, report=None):  # noqa: E501
        """BaseAlert - a model defined in OpenAPI

        :param id: The id of this BaseAlert.  # noqa: E501
        :type id: str
        :param tiny_id: The tiny_id of this BaseAlert.  # noqa: E501
        :type tiny_id: str
        :param alias: The alias of this BaseAlert.  # noqa: E501
        :type alias: str
        :param message: The message of this BaseAlert.  # noqa: E501
        :type message: str
        :param status: The status of this BaseAlert.  # noqa: E501
        :type status: str
        :param acknowledged: The acknowledged of this BaseAlert.  # noqa: E501
        :type acknowledged: bool
        :param is_seen: The is_seen of this BaseAlert.  # noqa: E501
        :type is_seen: bool
        :param tags: The tags of this BaseAlert.  # noqa: E501
        :type tags: List[str]
        :param snoozed: The snoozed of this BaseAlert.  # noqa: E501
        :type snoozed: bool
        :param snoozed_until: The snoozed_until of this BaseAlert.  # noqa: E501
        :type snoozed_until: datetime
        :param count: The count of this BaseAlert.  # noqa: E501
        :type count: int
        :param last_occurred_at: The last_occurred_at of this BaseAlert.  # noqa: E501
        :type last_occurred_at: datetime
        :param created_at: The created_at of this BaseAlert.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this BaseAlert.  # noqa: E501
        :type updated_at: datetime
        :param source: The source of this BaseAlert.  # noqa: E501
        :type source: str
        :param owner: The owner of this BaseAlert.  # noqa: E501
        :type owner: str
        :param priority: The priority of this BaseAlert.  # noqa: E501
        :type priority: str
        :param responders: The responders of this BaseAlert.  # noqa: E501
        :type responders: List[Responder]
        :param integration: The integration of this BaseAlert.  # noqa: E501
        :type integration: AlertIntegration
        :param report: The report of this BaseAlert.  # noqa: E501
        :type report: AlertReport
        """
        self.openapi_types = {
            'id': str,
            'tiny_id': str,
            'alias': str,
            'message': str,
            'status': str,
            'acknowledged': bool,
            'is_seen': bool,
            'tags': List[str],
            'snoozed': bool,
            'snoozed_until': datetime,
            'count': int,
            'last_occurred_at': datetime,
            'created_at': datetime,
            'updated_at': datetime,
            'source': str,
            'owner': str,
            'priority': str,
            'responders': List[Responder],
            'integration': AlertIntegration,
            'report': AlertReport
        }

        self.attribute_map = {
            'id': 'id',
            'tiny_id': 'tinyId',
            'alias': 'alias',
            'message': 'message',
            'status': 'status',
            'acknowledged': 'acknowledged',
            'is_seen': 'isSeen',
            'tags': 'tags',
            'snoozed': 'snoozed',
            'snoozed_until': 'snoozedUntil',
            'count': 'count',
            'last_occurred_at': 'lastOccurredAt',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'source': 'source',
            'owner': 'owner',
            'priority': 'priority',
            'responders': 'responders',
            'integration': 'integration',
            'report': 'report'
        }

        self._id = id
        self._tiny_id = tiny_id
        self._alias = alias
        self._message = message
        self._status = status
        self._acknowledged = acknowledged
        self._is_seen = is_seen
        self._tags = tags
        self._snoozed = snoozed
        self._snoozed_until = snoozed_until
        self._count = count
        self._last_occurred_at = last_occurred_at
        self._created_at = created_at
        self._updated_at = updated_at
        self._source = source
        self._owner = owner
        self._priority = priority
        self._responders = responders
        self._integration = integration
        self._report = report

    @classmethod
    def from_dict(cls, dikt) -> 'BaseAlert':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseAlert of this BaseAlert.  # noqa: E501
        :rtype: BaseAlert
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BaseAlert.


        :return: The id of this BaseAlert.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseAlert.


        :param id: The id of this BaseAlert.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def tiny_id(self):
        """Gets the tiny_id of this BaseAlert.


        :return: The tiny_id of this BaseAlert.
        :rtype: str
        """
        return self._tiny_id

    @tiny_id.setter
    def tiny_id(self, tiny_id):
        """Sets the tiny_id of this BaseAlert.


        :param tiny_id: The tiny_id of this BaseAlert.
        :type tiny_id: str
        """

        self._tiny_id = tiny_id

    @property
    def alias(self):
        """Gets the alias of this BaseAlert.


        :return: The alias of this BaseAlert.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this BaseAlert.


        :param alias: The alias of this BaseAlert.
        :type alias: str
        """

        self._alias = alias

    @property
    def message(self):
        """Gets the message of this BaseAlert.


        :return: The message of this BaseAlert.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BaseAlert.


        :param message: The message of this BaseAlert.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this BaseAlert.


        :return: The status of this BaseAlert.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseAlert.


        :param status: The status of this BaseAlert.
        :type status: str
        """

        self._status = status

    @property
    def acknowledged(self):
        """Gets the acknowledged of this BaseAlert.


        :return: The acknowledged of this BaseAlert.
        :rtype: bool
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """Sets the acknowledged of this BaseAlert.


        :param acknowledged: The acknowledged of this BaseAlert.
        :type acknowledged: bool
        """

        self._acknowledged = acknowledged

    @property
    def is_seen(self):
        """Gets the is_seen of this BaseAlert.


        :return: The is_seen of this BaseAlert.
        :rtype: bool
        """
        return self._is_seen

    @is_seen.setter
    def is_seen(self, is_seen):
        """Sets the is_seen of this BaseAlert.


        :param is_seen: The is_seen of this BaseAlert.
        :type is_seen: bool
        """

        self._is_seen = is_seen

    @property
    def tags(self):
        """Gets the tags of this BaseAlert.


        :return: The tags of this BaseAlert.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BaseAlert.


        :param tags: The tags of this BaseAlert.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def snoozed(self):
        """Gets the snoozed of this BaseAlert.


        :return: The snoozed of this BaseAlert.
        :rtype: bool
        """
        return self._snoozed

    @snoozed.setter
    def snoozed(self, snoozed):
        """Sets the snoozed of this BaseAlert.


        :param snoozed: The snoozed of this BaseAlert.
        :type snoozed: bool
        """

        self._snoozed = snoozed

    @property
    def snoozed_until(self):
        """Gets the snoozed_until of this BaseAlert.


        :return: The snoozed_until of this BaseAlert.
        :rtype: datetime
        """
        return self._snoozed_until

    @snoozed_until.setter
    def snoozed_until(self, snoozed_until):
        """Sets the snoozed_until of this BaseAlert.


        :param snoozed_until: The snoozed_until of this BaseAlert.
        :type snoozed_until: datetime
        """

        self._snoozed_until = snoozed_until

    @property
    def count(self):
        """Gets the count of this BaseAlert.


        :return: The count of this BaseAlert.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BaseAlert.


        :param count: The count of this BaseAlert.
        :type count: int
        """

        self._count = count

    @property
    def last_occurred_at(self):
        """Gets the last_occurred_at of this BaseAlert.


        :return: The last_occurred_at of this BaseAlert.
        :rtype: datetime
        """
        return self._last_occurred_at

    @last_occurred_at.setter
    def last_occurred_at(self, last_occurred_at):
        """Sets the last_occurred_at of this BaseAlert.


        :param last_occurred_at: The last_occurred_at of this BaseAlert.
        :type last_occurred_at: datetime
        """

        self._last_occurred_at = last_occurred_at

    @property
    def created_at(self):
        """Gets the created_at of this BaseAlert.


        :return: The created_at of this BaseAlert.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BaseAlert.


        :param created_at: The created_at of this BaseAlert.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BaseAlert.


        :return: The updated_at of this BaseAlert.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BaseAlert.


        :param updated_at: The updated_at of this BaseAlert.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def source(self):
        """Gets the source of this BaseAlert.


        :return: The source of this BaseAlert.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BaseAlert.


        :param source: The source of this BaseAlert.
        :type source: str
        """

        self._source = source

    @property
    def owner(self):
        """Gets the owner of this BaseAlert.


        :return: The owner of this BaseAlert.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this BaseAlert.


        :param owner: The owner of this BaseAlert.
        :type owner: str
        """

        self._owner = owner

    @property
    def priority(self):
        """Gets the priority of this BaseAlert.


        :return: The priority of this BaseAlert.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this BaseAlert.


        :param priority: The priority of this BaseAlert.
        :type priority: str
        """

        self._priority = priority

    @property
    def responders(self):
        """Gets the responders of this BaseAlert.


        :return: The responders of this BaseAlert.
        :rtype: List[Responder]
        """
        return self._responders

    @responders.setter
    def responders(self, responders):
        """Sets the responders of this BaseAlert.


        :param responders: The responders of this BaseAlert.
        :type responders: List[Responder]
        """

        self._responders = responders

    @property
    def integration(self):
        """Gets the integration of this BaseAlert.


        :return: The integration of this BaseAlert.
        :rtype: AlertIntegration
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this BaseAlert.


        :param integration: The integration of this BaseAlert.
        :type integration: AlertIntegration
        """

        self._integration = integration

    @property
    def report(self):
        """Gets the report of this BaseAlert.


        :return: The report of this BaseAlert.
        :rtype: AlertReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this BaseAlert.


        :param report: The report of this BaseAlert.
        :type report: AlertReport
        """

        self._report = report
