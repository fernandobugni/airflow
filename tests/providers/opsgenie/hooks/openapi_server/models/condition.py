# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field=None, key=None, _not=None, operation=None, expected_value=None, order=None):  # noqa: E501
        """Condition - a model defined in OpenAPI

        :param field: The field of this Condition.  # noqa: E501
        :type field: str
        :param key: The key of this Condition.  # noqa: E501
        :type key: str
        :param _not: The _not of this Condition.  # noqa: E501
        :type _not: bool
        :param operation: The operation of this Condition.  # noqa: E501
        :type operation: str
        :param expected_value: The expected_value of this Condition.  # noqa: E501
        :type expected_value: str
        :param order: The order of this Condition.  # noqa: E501
        :type order: int
        """
        self.openapi_types = {
            'field': str,
            'key': str,
            '_not': bool,
            'operation': str,
            'expected_value': str,
            'order': int
        }

        self.attribute_map = {
            'field': 'field',
            'key': 'key',
            '_not': 'not',
            'operation': 'operation',
            'expected_value': 'expectedValue',
            'order': 'order'
        }

        self._field = field
        self._key = key
        self.__not = _not
        self._operation = operation
        self._expected_value = expected_value
        self._order = order

    @classmethod
    def from_dict(cls, dikt) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Condition of this Condition.  # noqa: E501
        :rtype: Condition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field(self):
        """Gets the field of this Condition.

        Specifies which alert field will be used in condition. Possible values are message, alias, description, source, entity, tags, actions, extra-properties, recipients or teams  # noqa: E501

        :return: The field of this Condition.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this Condition.

        Specifies which alert field will be used in condition. Possible values are message, alias, description, source, entity, tags, actions, extra-properties, recipients or teams  # noqa: E501

        :param field: The field of this Condition.
        :type field: str
        """
        allowed_values = ["message", "alias", "description", "source", "entity", "tags", "actions", "extra-properties", "recipients", "teams", "priority", "details"]  # noqa: E501
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def key(self):
        """Gets the key of this Condition.

        If field is set as extra-properties, key could be used for key-value pair  # noqa: E501

        :return: The key of this Condition.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Condition.

        If field is set as extra-properties, key could be used for key-value pair  # noqa: E501

        :param key: The key of this Condition.
        :type key: str
        """

        self._key = key

    @property
    def _not(self):
        """Gets the _not of this Condition.

        Indicates behaviour of the given operation. Default value is false  # noqa: E501

        :return: The _not of this Condition.
        :rtype: bool
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this Condition.

        Indicates behaviour of the given operation. Default value is false  # noqa: E501

        :param _not: The _not of this Condition.
        :type _not: bool
        """

        self.__not = _not

    @property
    def operation(self):
        """Gets the operation of this Condition.

        It is the operation that will be executed for the given field and key.  # noqa: E501

        :return: The operation of this Condition.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Condition.

        It is the operation that will be executed for the given field and key.  # noqa: E501

        :param operation: The operation of this Condition.
        :type operation: str
        """
        allowed_values = ["matches", "contains", "starts-with", "ends-with", "equals", "contains-key", "contains-value", "greater-than", "less-than", "is-empty", "equals-ignore-whitespace"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def expected_value(self):
        """Gets the expected_value of this Condition.

        User defined value that will be compared with alert field according to the operation. Default value is empty string  # noqa: E501

        :return: The expected_value of this Condition.
        :rtype: str
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this Condition.

        User defined value that will be compared with alert field according to the operation. Default value is empty string  # noqa: E501

        :param expected_value: The expected_value of this Condition.
        :type expected_value: str
        """

        self._expected_value = expected_value

    @property
    def order(self):
        """Gets the order of this Condition.

        Order of the condition in conditions list  # noqa: E501

        :return: The order of this Condition.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Condition.

        Order of the condition in conditions list  # noqa: E501

        :param order: The order of this Condition.
        :type order: int
        """

        self._order = order
