# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.team_recipient import TeamRecipient
from openapi_server.models.user_recipient import UserRecipient
from openapi_server import util

from openapi_server.models.team_recipient import TeamRecipient  # noqa: E501
from openapi_server.models.user_recipient import UserRecipient  # noqa: E501

class UpdateSavedSearchPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, description=None, query=None, owner=None, teams=None):  # noqa: E501
        """UpdateSavedSearchPayload - a model defined in OpenAPI

        :param name: The name of this UpdateSavedSearchPayload.  # noqa: E501
        :type name: str
        :param description: The description of this UpdateSavedSearchPayload.  # noqa: E501
        :type description: str
        :param query: The query of this UpdateSavedSearchPayload.  # noqa: E501
        :type query: str
        :param owner: The owner of this UpdateSavedSearchPayload.  # noqa: E501
        :type owner: UserRecipient
        :param teams: The teams of this UpdateSavedSearchPayload.  # noqa: E501
        :type teams: List[TeamRecipient]
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'query': str,
            'owner': UserRecipient,
            'teams': List[TeamRecipient]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'query': 'query',
            'owner': 'owner',
            'teams': 'teams'
        }

        self._name = name
        self._description = description
        self._query = query
        self._owner = owner
        self._teams = teams

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateSavedSearchPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateSavedSearchPayload of this UpdateSavedSearchPayload.  # noqa: E501
        :rtype: UpdateSavedSearchPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateSavedSearchPayload.


        :return: The name of this UpdateSavedSearchPayload.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSavedSearchPayload.


        :param name: The name of this UpdateSavedSearchPayload.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateSavedSearchPayload.


        :return: The description of this UpdateSavedSearchPayload.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSavedSearchPayload.


        :param description: The description of this UpdateSavedSearchPayload.
        :type description: str
        """
        if description is not None and len(description) > 15000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `15000`")  # noqa: E501

        self._description = description

    @property
    def query(self):
        """Gets the query of this UpdateSavedSearchPayload.


        :return: The query of this UpdateSavedSearchPayload.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UpdateSavedSearchPayload.


        :param query: The query of this UpdateSavedSearchPayload.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501
        if query is not None and len(query) > 1000:
            raise ValueError("Invalid value for `query`, length must be less than or equal to `1000`")  # noqa: E501

        self._query = query

    @property
    def owner(self):
        """Gets the owner of this UpdateSavedSearchPayload.


        :return: The owner of this UpdateSavedSearchPayload.
        :rtype: UserRecipient
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this UpdateSavedSearchPayload.


        :param owner: The owner of this UpdateSavedSearchPayload.
        :type owner: UserRecipient
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def teams(self):
        """Gets the teams of this UpdateSavedSearchPayload.

        Teams that the alert will be routed to send notifications  # noqa: E501

        :return: The teams of this UpdateSavedSearchPayload.
        :rtype: List[TeamRecipient]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this UpdateSavedSearchPayload.

        Teams that the alert will be routed to send notifications  # noqa: E501

        :param teams: The teams of this UpdateSavedSearchPayload.
        :type teams: List[TeamRecipient]
        """
        if teams is not None and len(teams) > 20:
            raise ValueError("Invalid value for `teams`, number of items must be less than or equal to `20`")  # noqa: E501

        self._teams = teams
