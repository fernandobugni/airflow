# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.recipient import Recipient
from openapi_server import util

from openapi_server.models.recipient import Recipient  # noqa: E501

class CreateAlertPayloadAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, alias=None, description=None, responders=None, visible_to=None, actions=None, tags=None, details=None, entity=None, priority=None):  # noqa: E501
        """CreateAlertPayloadAllOf - a model defined in OpenAPI

        :param message: The message of this CreateAlertPayloadAllOf.  # noqa: E501
        :type message: str
        :param alias: The alias of this CreateAlertPayloadAllOf.  # noqa: E501
        :type alias: str
        :param description: The description of this CreateAlertPayloadAllOf.  # noqa: E501
        :type description: str
        :param responders: The responders of this CreateAlertPayloadAllOf.  # noqa: E501
        :type responders: List[Recipient]
        :param visible_to: The visible_to of this CreateAlertPayloadAllOf.  # noqa: E501
        :type visible_to: List[Recipient]
        :param actions: The actions of this CreateAlertPayloadAllOf.  # noqa: E501
        :type actions: List[str]
        :param tags: The tags of this CreateAlertPayloadAllOf.  # noqa: E501
        :type tags: List[str]
        :param details: The details of this CreateAlertPayloadAllOf.  # noqa: E501
        :type details: Dict[str, str]
        :param entity: The entity of this CreateAlertPayloadAllOf.  # noqa: E501
        :type entity: str
        :param priority: The priority of this CreateAlertPayloadAllOf.  # noqa: E501
        :type priority: str
        """
        self.openapi_types = {
            'message': str,
            'alias': str,
            'description': str,
            'responders': List[Recipient],
            'visible_to': List[Recipient],
            'actions': List[str],
            'tags': List[str],
            'details': Dict[str, str],
            'entity': str,
            'priority': str
        }

        self.attribute_map = {
            'message': 'message',
            'alias': 'alias',
            'description': 'description',
            'responders': 'responders',
            'visible_to': 'visibleTo',
            'actions': 'actions',
            'tags': 'tags',
            'details': 'details',
            'entity': 'entity',
            'priority': 'priority'
        }

        self._message = message
        self._alias = alias
        self._description = description
        self._responders = responders
        self._visible_to = visible_to
        self._actions = actions
        self._tags = tags
        self._details = details
        self._entity = entity
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt) -> 'CreateAlertPayloadAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateAlertPayload_allOf of this CreateAlertPayloadAllOf.  # noqa: E501
        :rtype: CreateAlertPayloadAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this CreateAlertPayloadAllOf.

        Message of the alert  # noqa: E501

        :return: The message of this CreateAlertPayloadAllOf.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateAlertPayloadAllOf.

        Message of the alert  # noqa: E501

        :param message: The message of this CreateAlertPayloadAllOf.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def alias(self):
        """Gets the alias of this CreateAlertPayloadAllOf.

        Client-defined identifier of the alert, that is also the key element of alert deduplication.  # noqa: E501

        :return: The alias of this CreateAlertPayloadAllOf.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this CreateAlertPayloadAllOf.

        Client-defined identifier of the alert, that is also the key element of alert deduplication.  # noqa: E501

        :param alias: The alias of this CreateAlertPayloadAllOf.
        :type alias: str
        """

        self._alias = alias

    @property
    def description(self):
        """Gets the description of this CreateAlertPayloadAllOf.

        Description field of the alert that is generally used to provide a detailed information about the alert.  # noqa: E501

        :return: The description of this CreateAlertPayloadAllOf.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAlertPayloadAllOf.

        Description field of the alert that is generally used to provide a detailed information about the alert.  # noqa: E501

        :param description: The description of this CreateAlertPayloadAllOf.
        :type description: str
        """

        self._description = description

    @property
    def responders(self):
        """Gets the responders of this CreateAlertPayloadAllOf.

        Responders that the alert will be routed to send notifications  # noqa: E501

        :return: The responders of this CreateAlertPayloadAllOf.
        :rtype: List[Recipient]
        """
        return self._responders

    @responders.setter
    def responders(self, responders):
        """Sets the responders of this CreateAlertPayloadAllOf.

        Responders that the alert will be routed to send notifications  # noqa: E501

        :param responders: The responders of this CreateAlertPayloadAllOf.
        :type responders: List[Recipient]
        """

        self._responders = responders

    @property
    def visible_to(self):
        """Gets the visible_to of this CreateAlertPayloadAllOf.

        Teams and users that the alert will become visible to without sending any notification  # noqa: E501

        :return: The visible_to of this CreateAlertPayloadAllOf.
        :rtype: List[Recipient]
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to):
        """Sets the visible_to of this CreateAlertPayloadAllOf.

        Teams and users that the alert will become visible to without sending any notification  # noqa: E501

        :param visible_to: The visible_to of this CreateAlertPayloadAllOf.
        :type visible_to: List[Recipient]
        """

        self._visible_to = visible_to

    @property
    def actions(self):
        """Gets the actions of this CreateAlertPayloadAllOf.

        Custom actions that will be available for the alert  # noqa: E501

        :return: The actions of this CreateAlertPayloadAllOf.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CreateAlertPayloadAllOf.

        Custom actions that will be available for the alert  # noqa: E501

        :param actions: The actions of this CreateAlertPayloadAllOf.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def tags(self):
        """Gets the tags of this CreateAlertPayloadAllOf.

        Tags of the alert  # noqa: E501

        :return: The tags of this CreateAlertPayloadAllOf.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAlertPayloadAllOf.

        Tags of the alert  # noqa: E501

        :param tags: The tags of this CreateAlertPayloadAllOf.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def details(self):
        """Gets the details of this CreateAlertPayloadAllOf.

        Map of key-value pairs to use as custom properties of the alert  # noqa: E501

        :return: The details of this CreateAlertPayloadAllOf.
        :rtype: Dict[str, str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CreateAlertPayloadAllOf.

        Map of key-value pairs to use as custom properties of the alert  # noqa: E501

        :param details: The details of this CreateAlertPayloadAllOf.
        :type details: Dict[str, str]
        """

        self._details = details

    @property
    def entity(self):
        """Gets the entity of this CreateAlertPayloadAllOf.

        Entity field of the alert that is generally used to specify which domain alert is related to  # noqa: E501

        :return: The entity of this CreateAlertPayloadAllOf.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CreateAlertPayloadAllOf.

        Entity field of the alert that is generally used to specify which domain alert is related to  # noqa: E501

        :param entity: The entity of this CreateAlertPayloadAllOf.
        :type entity: str
        """

        self._entity = entity

    @property
    def priority(self):
        """Gets the priority of this CreateAlertPayloadAllOf.

        Priority level of the alert  # noqa: E501

        :return: The priority of this CreateAlertPayloadAllOf.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateAlertPayloadAllOf.

        Priority level of the alert  # noqa: E501

        :param priority: The priority of this CreateAlertPayloadAllOf.
        :type priority: str
        """
        allowed_values = ["P1", "P2", "P3", "P4", "P5"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority
