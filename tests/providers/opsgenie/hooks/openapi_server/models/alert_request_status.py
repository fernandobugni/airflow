# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AlertRequestStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action=None, processed_at=None, integration_id=None, is_success=None, status=None, alert_id=None, alias=None):  # noqa: E501
        """AlertRequestStatus - a model defined in OpenAPI

        :param action: The action of this AlertRequestStatus.  # noqa: E501
        :type action: str
        :param processed_at: The processed_at of this AlertRequestStatus.  # noqa: E501
        :type processed_at: datetime
        :param integration_id: The integration_id of this AlertRequestStatus.  # noqa: E501
        :type integration_id: str
        :param is_success: The is_success of this AlertRequestStatus.  # noqa: E501
        :type is_success: bool
        :param status: The status of this AlertRequestStatus.  # noqa: E501
        :type status: str
        :param alert_id: The alert_id of this AlertRequestStatus.  # noqa: E501
        :type alert_id: str
        :param alias: The alias of this AlertRequestStatus.  # noqa: E501
        :type alias: str
        """
        self.openapi_types = {
            'action': str,
            'processed_at': datetime,
            'integration_id': str,
            'is_success': bool,
            'status': str,
            'alert_id': str,
            'alias': str
        }

        self.attribute_map = {
            'action': 'action',
            'processed_at': 'processedAt',
            'integration_id': 'integrationId',
            'is_success': 'isSuccess',
            'status': 'status',
            'alert_id': 'alertId',
            'alias': 'alias'
        }

        self._action = action
        self._processed_at = processed_at
        self._integration_id = integration_id
        self._is_success = is_success
        self._status = status
        self._alert_id = alert_id
        self._alias = alias

    @classmethod
    def from_dict(cls, dikt) -> 'AlertRequestStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlertRequestStatus of this AlertRequestStatus.  # noqa: E501
        :rtype: AlertRequestStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this AlertRequestStatus.


        :return: The action of this AlertRequestStatus.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AlertRequestStatus.


        :param action: The action of this AlertRequestStatus.
        :type action: str
        """

        self._action = action

    @property
    def processed_at(self):
        """Gets the processed_at of this AlertRequestStatus.


        :return: The processed_at of this AlertRequestStatus.
        :rtype: datetime
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this AlertRequestStatus.


        :param processed_at: The processed_at of this AlertRequestStatus.
        :type processed_at: datetime
        """

        self._processed_at = processed_at

    @property
    def integration_id(self):
        """Gets the integration_id of this AlertRequestStatus.


        :return: The integration_id of this AlertRequestStatus.
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this AlertRequestStatus.


        :param integration_id: The integration_id of this AlertRequestStatus.
        :type integration_id: str
        """

        self._integration_id = integration_id

    @property
    def is_success(self):
        """Gets the is_success of this AlertRequestStatus.


        :return: The is_success of this AlertRequestStatus.
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this AlertRequestStatus.


        :param is_success: The is_success of this AlertRequestStatus.
        :type is_success: bool
        """

        self._is_success = is_success

    @property
    def status(self):
        """Gets the status of this AlertRequestStatus.


        :return: The status of this AlertRequestStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertRequestStatus.


        :param status: The status of this AlertRequestStatus.
        :type status: str
        """

        self._status = status

    @property
    def alert_id(self):
        """Gets the alert_id of this AlertRequestStatus.


        :return: The alert_id of this AlertRequestStatus.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this AlertRequestStatus.


        :param alert_id: The alert_id of this AlertRequestStatus.
        :type alert_id: str
        """

        self._alert_id = alert_id

    @property
    def alias(self):
        """Gets the alias of this AlertRequestStatus.


        :return: The alias of this AlertRequestStatus.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this AlertRequestStatus.


        :param alias: The alias of this AlertRequestStatus.
        :type alias: str
        """

        self._alias = alias
