# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.recipient import Recipient
from openapi_server import util

from openapi_server.models.recipient import Recipient  # noqa: E501

class AddResponderToAlertPayloadAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, responder=None):  # noqa: E501
        """AddResponderToAlertPayloadAllOf - a model defined in OpenAPI

        :param responder: The responder of this AddResponderToAlertPayloadAllOf.  # noqa: E501
        :type responder: Recipient
        """
        self.openapi_types = {
            'responder': Recipient
        }

        self.attribute_map = {
            'responder': 'responder'
        }

        self._responder = responder

    @classmethod
    def from_dict(cls, dikt) -> 'AddResponderToAlertPayloadAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddResponderToAlertPayload_allOf of this AddResponderToAlertPayloadAllOf.  # noqa: E501
        :rtype: AddResponderToAlertPayloadAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def responder(self):
        """Gets the responder of this AddResponderToAlertPayloadAllOf.


        :return: The responder of this AddResponderToAlertPayloadAllOf.
        :rtype: Recipient
        """
        return self._responder

    @responder.setter
    def responder(self, responder):
        """Sets the responder of this AddResponderToAlertPayloadAllOf.


        :param responder: The responder of this AddResponderToAlertPayloadAllOf.
        :type responder: Recipient
        """
        if responder is None:
            raise ValueError("Invalid value for `responder`, must not be `None`")  # noqa: E501

        self._responder = responder
