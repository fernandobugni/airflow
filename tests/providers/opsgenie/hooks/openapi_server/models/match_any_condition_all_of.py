# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.condition import Condition
from openapi_server import util

from openapi_server.models.condition import Condition  # noqa: E501

class MatchAnyConditionAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions=None):  # noqa: E501
        """MatchAnyConditionAllOf - a model defined in OpenAPI

        :param conditions: The conditions of this MatchAnyConditionAllOf.  # noqa: E501
        :type conditions: List[Condition]
        """
        self.openapi_types = {
            'conditions': List[Condition]
        }

        self.attribute_map = {
            'conditions': 'conditions'
        }

        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt) -> 'MatchAnyConditionAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MatchAnyCondition_allOf of this MatchAnyConditionAllOf.  # noqa: E501
        :rtype: MatchAnyConditionAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this MatchAnyConditionAllOf.


        :return: The conditions of this MatchAnyConditionAllOf.
        :rtype: List[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this MatchAnyConditionAllOf.


        :param conditions: The conditions of this MatchAnyConditionAllOf.
        :type conditions: List[Condition]
        """
        if conditions is not None and len(conditions) < 1:
            raise ValueError("Invalid value for `conditions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._conditions = conditions
