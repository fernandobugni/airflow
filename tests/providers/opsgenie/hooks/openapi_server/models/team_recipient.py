# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.recipient import Recipient
from openapi_server.models.team_recipient_all_of import TeamRecipientAllOf
from openapi_server import util

from openapi_server.models.recipient import Recipient  # noqa: E501
from openapi_server.models.team_recipient_all_of import TeamRecipientAllOf  # noqa: E501

class TeamRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, id=None, name=None):  # noqa: E501
        """TeamRecipient - a model defined in OpenAPI

        :param type: The type of this TeamRecipient.  # noqa: E501
        :type type: str
        :param id: The id of this TeamRecipient.  # noqa: E501
        :type id: str
        :param name: The name of this TeamRecipient.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'type': str,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'type': 'type',
            'id': 'id',
            'name': 'name'
        }

        self._type = type
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'TeamRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TeamRecipient of this TeamRecipient.  # noqa: E501
        :rtype: TeamRecipient
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this TeamRecipient.


        :return: The type of this TeamRecipient.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TeamRecipient.


        :param type: The type of this TeamRecipient.
        :type type: str
        """
        allowed_values = ["all", "none", "user", "escalation", "schedule", "team", "group"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this TeamRecipient.


        :return: The id of this TeamRecipient.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamRecipient.


        :param id: The id of this TeamRecipient.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TeamRecipient.


        :return: The name of this TeamRecipient.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamRecipient.


        :param name: The name of this TeamRecipient.
        :type name: str
        """

        self._name = name
