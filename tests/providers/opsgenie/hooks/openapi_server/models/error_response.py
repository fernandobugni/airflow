# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.base_response import BaseResponse
from openapi_server.models.error_response_all_of import ErrorResponseAllOf
from openapi_server import util

from openapi_server.models.base_response import BaseResponse  # noqa: E501
from openapi_server.models.error_response_all_of import ErrorResponseAllOf  # noqa: E501

class ErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id=None, took=0.0, message=None, code=None, response_headers=None):  # noqa: E501
        """ErrorResponse - a model defined in OpenAPI

        :param request_id: The request_id of this ErrorResponse.  # noqa: E501
        :type request_id: str
        :param took: The took of this ErrorResponse.  # noqa: E501
        :type took: float
        :param message: The message of this ErrorResponse.  # noqa: E501
        :type message: str
        :param code: The code of this ErrorResponse.  # noqa: E501
        :type code: int
        :param response_headers: The response_headers of this ErrorResponse.  # noqa: E501
        :type response_headers: Dict[str, List[str]]
        """
        self.openapi_types = {
            'request_id': str,
            'took': float,
            'message': str,
            'code': int,
            'response_headers': Dict[str, List[str]]
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'took': 'took',
            'message': 'message',
            'code': 'code',
            'response_headers': 'responseHeaders'
        }

        self._request_id = request_id
        self._took = took
        self._message = message
        self._code = code
        self._response_headers = response_headers

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorResponse of this ErrorResponse.  # noqa: E501
        :rtype: ErrorResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this ErrorResponse.


        :return: The request_id of this ErrorResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ErrorResponse.


        :param request_id: The request_id of this ErrorResponse.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def took(self):
        """Gets the took of this ErrorResponse.


        :return: The took of this ErrorResponse.
        :rtype: float
        """
        return self._took

    @took.setter
    def took(self, took):
        """Sets the took of this ErrorResponse.


        :param took: The took of this ErrorResponse.
        :type took: float
        """
        if took is None:
            raise ValueError("Invalid value for `took`, must not be `None`")  # noqa: E501

        self._took = took

    @property
    def message(self):
        """Gets the message of this ErrorResponse.


        :return: The message of this ErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponse.


        :param message: The message of this ErrorResponse.
        :type message: str
        """

        self._message = message

    @property
    def code(self):
        """Gets the code of this ErrorResponse.


        :return: The code of this ErrorResponse.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorResponse.


        :param code: The code of this ErrorResponse.
        :type code: int
        """

        self._code = code

    @property
    def response_headers(self):
        """Gets the response_headers of this ErrorResponse.


        :return: The response_headers of this ErrorResponse.
        :rtype: Dict[str, List[str]]
        """
        return self._response_headers

    @response_headers.setter
    def response_headers(self, response_headers):
        """Sets the response_headers of this ErrorResponse.


        :param response_headers: The response_headers of this ErrorResponse.
        :type response_headers: Dict[str, List[str]]
        """

        self._response_headers = response_headers
