# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.filter import Filter
from openapi_server import util

from openapi_server.models.filter import Filter  # noqa: E501

class MatchAll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None):  # noqa: E501
        """MatchAll - a model defined in OpenAPI

        :param type: The type of this MatchAll.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'type': str
        }

        self.attribute_map = {
            'type': 'type'
        }

        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'MatchAll':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MatchAll of this MatchAll.  # noqa: E501
        :rtype: MatchAll
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this MatchAll.


        :return: The type of this MatchAll.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MatchAll.


        :param type: The type of this MatchAll.
        :type type: str
        """
        allowed_values = ["match-all", "match-any-condition", "match-all-conditions"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
