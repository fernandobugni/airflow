# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.time_restriction_interval import TimeRestrictionInterval
from openapi_server.models.weekday_time_restriction import WeekdayTimeRestriction
from openapi_server.models.weekday_time_restriction_interval_all_of import WeekdayTimeRestrictionIntervalAllOf
from openapi_server import util

from openapi_server.models.time_restriction_interval import TimeRestrictionInterval  # noqa: E501
from openapi_server.models.weekday_time_restriction import WeekdayTimeRestriction  # noqa: E501
from openapi_server.models.weekday_time_restriction_interval_all_of import WeekdayTimeRestrictionIntervalAllOf  # noqa: E501

class WeekdayTimeRestrictionInterval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, restrictions=None):  # noqa: E501
        """WeekdayTimeRestrictionInterval - a model defined in OpenAPI

        :param type: The type of this WeekdayTimeRestrictionInterval.  # noqa: E501
        :type type: str
        :param restrictions: The restrictions of this WeekdayTimeRestrictionInterval.  # noqa: E501
        :type restrictions: List[WeekdayTimeRestriction]
        """
        self.openapi_types = {
            'type': str,
            'restrictions': List[WeekdayTimeRestriction]
        }

        self.attribute_map = {
            'type': 'type',
            'restrictions': 'restrictions'
        }

        self._type = type
        self._restrictions = restrictions

    @classmethod
    def from_dict(cls, dikt) -> 'WeekdayTimeRestrictionInterval':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeekdayTimeRestrictionInterval of this WeekdayTimeRestrictionInterval.  # noqa: E501
        :rtype: WeekdayTimeRestrictionInterval
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this WeekdayTimeRestrictionInterval.


        :return: The type of this WeekdayTimeRestrictionInterval.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WeekdayTimeRestrictionInterval.


        :param type: The type of this WeekdayTimeRestrictionInterval.
        :type type: str
        """
        allowed_values = ["weekday-and-time-of-day", "time-of-day"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def restrictions(self):
        """Gets the restrictions of this WeekdayTimeRestrictionInterval.


        :return: The restrictions of this WeekdayTimeRestrictionInterval.
        :rtype: List[WeekdayTimeRestriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this WeekdayTimeRestrictionInterval.


        :param restrictions: The restrictions of this WeekdayTimeRestrictionInterval.
        :type restrictions: List[WeekdayTimeRestriction]
        """
        if restrictions is not None and len(restrictions) > 15:
            raise ValueError("Invalid value for `restrictions`, number of items must be less than or equal to `15`")  # noqa: E501
        if restrictions is not None and len(restrictions) < 1:
            raise ValueError("Invalid value for `restrictions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._restrictions = restrictions
