# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.account_plan import AccountPlan
from openapi_server import util

from openapi_server.models.account_plan import AccountPlan  # noqa: E501

class AccountInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, user_count=None, plan=None):  # noqa: E501
        """AccountInfo - a model defined in OpenAPI

        :param name: The name of this AccountInfo.  # noqa: E501
        :type name: str
        :param user_count: The user_count of this AccountInfo.  # noqa: E501
        :type user_count: int
        :param plan: The plan of this AccountInfo.  # noqa: E501
        :type plan: AccountPlan
        """
        self.openapi_types = {
            'name': str,
            'user_count': int,
            'plan': AccountPlan
        }

        self.attribute_map = {
            'name': 'name',
            'user_count': 'userCount',
            'plan': 'plan'
        }

        self._name = name
        self._user_count = user_count
        self._plan = plan

    @classmethod
    def from_dict(cls, dikt) -> 'AccountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountInfo of this AccountInfo.  # noqa: E501
        :rtype: AccountInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AccountInfo.


        :return: The name of this AccountInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountInfo.


        :param name: The name of this AccountInfo.
        :type name: str
        """

        self._name = name

    @property
    def user_count(self):
        """Gets the user_count of this AccountInfo.


        :return: The user_count of this AccountInfo.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this AccountInfo.


        :param user_count: The user_count of this AccountInfo.
        :type user_count: int
        """

        self._user_count = user_count

    @property
    def plan(self):
        """Gets the plan of this AccountInfo.


        :return: The plan of this AccountInfo.
        :rtype: AccountPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this AccountInfo.


        :param plan: The plan of this AccountInfo.
        :type plan: AccountPlan
        """

        self._plan = plan
