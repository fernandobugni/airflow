# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.user_recipient import UserRecipient
from openapi_server import util

from openapi_server.models.user_recipient import UserRecipient  # noqa: E501

class AssignAlertPayloadAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner=None):  # noqa: E501
        """AssignAlertPayloadAllOf - a model defined in OpenAPI

        :param owner: The owner of this AssignAlertPayloadAllOf.  # noqa: E501
        :type owner: UserRecipient
        """
        self.openapi_types = {
            'owner': UserRecipient
        }

        self.attribute_map = {
            'owner': 'owner'
        }

        self._owner = owner

    @classmethod
    def from_dict(cls, dikt) -> 'AssignAlertPayloadAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssignAlertPayload_allOf of this AssignAlertPayloadAllOf.  # noqa: E501
        :rtype: AssignAlertPayloadAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner(self):
        """Gets the owner of this AssignAlertPayloadAllOf.


        :return: The owner of this AssignAlertPayloadAllOf.
        :rtype: UserRecipient
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AssignAlertPayloadAllOf.


        :param owner: The owner of this AssignAlertPayloadAllOf.
        :type owner: UserRecipient
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner
