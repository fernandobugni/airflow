# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UpdateAlertPriorityPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority=None):  # noqa: E501
        """UpdateAlertPriorityPayload - a model defined in OpenAPI

        :param priority: The priority of this UpdateAlertPriorityPayload.  # noqa: E501
        :type priority: str
        """
        self.openapi_types = {
            'priority': str
        }

        self.attribute_map = {
            'priority': 'priority'
        }

        self._priority = priority

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateAlertPriorityPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateAlertPriorityPayload of this UpdateAlertPriorityPayload.  # noqa: E501
        :rtype: UpdateAlertPriorityPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self):
        """Gets the priority of this UpdateAlertPriorityPayload.

        Priority level of the alert  # noqa: E501

        :return: The priority of this UpdateAlertPriorityPayload.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpdateAlertPriorityPayload.

        Priority level of the alert  # noqa: E501

        :param priority: The priority of this UpdateAlertPriorityPayload.
        :type priority: str
        """
        allowed_values = ["P1", "P2", "P3", "P4", "P5"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority
