# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.responder import Responder
from openapi_server import util

from openapi_server.models.responder import Responder  # noqa: E501

class BaseIncident(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, tiny_id=None, message=None, status=None, is_seen=None, tags=None, created_at=None, updated_at=None, source=None, owner=None, priority=None, responders=None, owner_team=None, extra_properties=None):  # noqa: E501
        """BaseIncident - a model defined in OpenAPI

        :param id: The id of this BaseIncident.  # noqa: E501
        :type id: str
        :param tiny_id: The tiny_id of this BaseIncident.  # noqa: E501
        :type tiny_id: str
        :param message: The message of this BaseIncident.  # noqa: E501
        :type message: str
        :param status: The status of this BaseIncident.  # noqa: E501
        :type status: str
        :param is_seen: The is_seen of this BaseIncident.  # noqa: E501
        :type is_seen: bool
        :param tags: The tags of this BaseIncident.  # noqa: E501
        :type tags: List[str]
        :param created_at: The created_at of this BaseIncident.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this BaseIncident.  # noqa: E501
        :type updated_at: datetime
        :param source: The source of this BaseIncident.  # noqa: E501
        :type source: str
        :param owner: The owner of this BaseIncident.  # noqa: E501
        :type owner: str
        :param priority: The priority of this BaseIncident.  # noqa: E501
        :type priority: str
        :param responders: The responders of this BaseIncident.  # noqa: E501
        :type responders: List[Responder]
        :param owner_team: The owner_team of this BaseIncident.  # noqa: E501
        :type owner_team: str
        :param extra_properties: The extra_properties of this BaseIncident.  # noqa: E501
        :type extra_properties: Dict[str, str]
        """
        self.openapi_types = {
            'id': str,
            'tiny_id': str,
            'message': str,
            'status': str,
            'is_seen': bool,
            'tags': List[str],
            'created_at': datetime,
            'updated_at': datetime,
            'source': str,
            'owner': str,
            'priority': str,
            'responders': List[Responder],
            'owner_team': str,
            'extra_properties': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'tiny_id': 'tinyId',
            'message': 'message',
            'status': 'status',
            'is_seen': 'isSeen',
            'tags': 'tags',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'source': 'source',
            'owner': 'owner',
            'priority': 'priority',
            'responders': 'responders',
            'owner_team': 'ownerTeam',
            'extra_properties': 'extraProperties'
        }

        self._id = id
        self._tiny_id = tiny_id
        self._message = message
        self._status = status
        self._is_seen = is_seen
        self._tags = tags
        self._created_at = created_at
        self._updated_at = updated_at
        self._source = source
        self._owner = owner
        self._priority = priority
        self._responders = responders
        self._owner_team = owner_team
        self._extra_properties = extra_properties

    @classmethod
    def from_dict(cls, dikt) -> 'BaseIncident':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseIncident of this BaseIncident.  # noqa: E501
        :rtype: BaseIncident
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BaseIncident.


        :return: The id of this BaseIncident.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseIncident.


        :param id: The id of this BaseIncident.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def tiny_id(self):
        """Gets the tiny_id of this BaseIncident.


        :return: The tiny_id of this BaseIncident.
        :rtype: str
        """
        return self._tiny_id

    @tiny_id.setter
    def tiny_id(self, tiny_id):
        """Sets the tiny_id of this BaseIncident.


        :param tiny_id: The tiny_id of this BaseIncident.
        :type tiny_id: str
        """

        self._tiny_id = tiny_id

    @property
    def message(self):
        """Gets the message of this BaseIncident.


        :return: The message of this BaseIncident.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BaseIncident.


        :param message: The message of this BaseIncident.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this BaseIncident.


        :return: The status of this BaseIncident.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseIncident.


        :param status: The status of this BaseIncident.
        :type status: str
        """

        self._status = status

    @property
    def is_seen(self):
        """Gets the is_seen of this BaseIncident.


        :return: The is_seen of this BaseIncident.
        :rtype: bool
        """
        return self._is_seen

    @is_seen.setter
    def is_seen(self, is_seen):
        """Sets the is_seen of this BaseIncident.


        :param is_seen: The is_seen of this BaseIncident.
        :type is_seen: bool
        """

        self._is_seen = is_seen

    @property
    def tags(self):
        """Gets the tags of this BaseIncident.


        :return: The tags of this BaseIncident.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BaseIncident.


        :param tags: The tags of this BaseIncident.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def created_at(self):
        """Gets the created_at of this BaseIncident.


        :return: The created_at of this BaseIncident.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BaseIncident.


        :param created_at: The created_at of this BaseIncident.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BaseIncident.


        :return: The updated_at of this BaseIncident.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BaseIncident.


        :param updated_at: The updated_at of this BaseIncident.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def source(self):
        """Gets the source of this BaseIncident.


        :return: The source of this BaseIncident.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BaseIncident.


        :param source: The source of this BaseIncident.
        :type source: str
        """

        self._source = source

    @property
    def owner(self):
        """Gets the owner of this BaseIncident.


        :return: The owner of this BaseIncident.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this BaseIncident.


        :param owner: The owner of this BaseIncident.
        :type owner: str
        """

        self._owner = owner

    @property
    def priority(self):
        """Gets the priority of this BaseIncident.


        :return: The priority of this BaseIncident.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this BaseIncident.


        :param priority: The priority of this BaseIncident.
        :type priority: str
        """

        self._priority = priority

    @property
    def responders(self):
        """Gets the responders of this BaseIncident.


        :return: The responders of this BaseIncident.
        :rtype: List[Responder]
        """
        return self._responders

    @responders.setter
    def responders(self, responders):
        """Sets the responders of this BaseIncident.


        :param responders: The responders of this BaseIncident.
        :type responders: List[Responder]
        """

        self._responders = responders

    @property
    def owner_team(self):
        """Gets the owner_team of this BaseIncident.


        :return: The owner_team of this BaseIncident.
        :rtype: str
        """
        return self._owner_team

    @owner_team.setter
    def owner_team(self, owner_team):
        """Sets the owner_team of this BaseIncident.


        :param owner_team: The owner_team of this BaseIncident.
        :type owner_team: str
        """

        self._owner_team = owner_team

    @property
    def extra_properties(self):
        """Gets the extra_properties of this BaseIncident.

        Map of key-value pairs to use as custom properties of the incident  # noqa: E501

        :return: The extra_properties of this BaseIncident.
        :rtype: Dict[str, str]
        """
        return self._extra_properties

    @extra_properties.setter
    def extra_properties(self, extra_properties):
        """Sets the extra_properties of this BaseIncident.

        Map of key-value pairs to use as custom properties of the incident  # noqa: E501

        :param extra_properties: The extra_properties of this BaseIncident.
        :type extra_properties: Dict[str, str]
        """

        self._extra_properties = extra_properties
