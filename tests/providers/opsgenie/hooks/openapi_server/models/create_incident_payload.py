# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.create_incident_payload_all_of import CreateIncidentPayloadAllOf
from openapi_server.models.recipient import Recipient
from openapi_server.models.status_page_entry import StatusPageEntry
from openapi_server import util

from openapi_server.models.create_incident_payload_all_of import CreateIncidentPayloadAllOf  # noqa: E501
from openapi_server.models.recipient import Recipient  # noqa: E501
from openapi_server.models.status_page_entry import StatusPageEntry  # noqa: E501

class CreateIncidentPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, description=None, responders=None, tags=None, details=None, priority=None, note=None, service_id=None, status_page_entry=None, notify_stakeholders=None):  # noqa: E501
        """CreateIncidentPayload - a model defined in OpenAPI

        :param message: The message of this CreateIncidentPayload.  # noqa: E501
        :type message: str
        :param description: The description of this CreateIncidentPayload.  # noqa: E501
        :type description: str
        :param responders: The responders of this CreateIncidentPayload.  # noqa: E501
        :type responders: List[Recipient]
        :param tags: The tags of this CreateIncidentPayload.  # noqa: E501
        :type tags: List[str]
        :param details: The details of this CreateIncidentPayload.  # noqa: E501
        :type details: Dict[str, str]
        :param priority: The priority of this CreateIncidentPayload.  # noqa: E501
        :type priority: str
        :param note: The note of this CreateIncidentPayload.  # noqa: E501
        :type note: str
        :param service_id: The service_id of this CreateIncidentPayload.  # noqa: E501
        :type service_id: str
        :param status_page_entry: The status_page_entry of this CreateIncidentPayload.  # noqa: E501
        :type status_page_entry: Dict[str, StatusPageEntry]
        :param notify_stakeholders: The notify_stakeholders of this CreateIncidentPayload.  # noqa: E501
        :type notify_stakeholders: bool
        """
        self.openapi_types = {
            'message': str,
            'description': str,
            'responders': List[Recipient],
            'tags': List[str],
            'details': Dict[str, str],
            'priority': str,
            'note': str,
            'service_id': str,
            'status_page_entry': Dict[str, StatusPageEntry],
            'notify_stakeholders': bool
        }

        self.attribute_map = {
            'message': 'message',
            'description': 'description',
            'responders': 'responders',
            'tags': 'tags',
            'details': 'details',
            'priority': 'priority',
            'note': 'note',
            'service_id': 'serviceId',
            'status_page_entry': 'statusPageEntry',
            'notify_stakeholders': 'notifyStakeholders'
        }

        self._message = message
        self._description = description
        self._responders = responders
        self._tags = tags
        self._details = details
        self._priority = priority
        self._note = note
        self._service_id = service_id
        self._status_page_entry = status_page_entry
        self._notify_stakeholders = notify_stakeholders

    @classmethod
    def from_dict(cls, dikt) -> 'CreateIncidentPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateIncidentPayload of this CreateIncidentPayload.  # noqa: E501
        :rtype: CreateIncidentPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this CreateIncidentPayload.

        Message of the incident  # noqa: E501

        :return: The message of this CreateIncidentPayload.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateIncidentPayload.

        Message of the incident  # noqa: E501

        :param message: The message of this CreateIncidentPayload.
        :type message: str
        """

        self._message = message

    @property
    def description(self):
        """Gets the description of this CreateIncidentPayload.

        Description field of the incident that is generally used to provide a detailed information about the incident.  # noqa: E501

        :return: The description of this CreateIncidentPayload.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateIncidentPayload.

        Description field of the incident that is generally used to provide a detailed information about the incident.  # noqa: E501

        :param description: The description of this CreateIncidentPayload.
        :type description: str
        """

        self._description = description

    @property
    def responders(self):
        """Gets the responders of this CreateIncidentPayload.

        Responders that the incident will be routed to send notifications  # noqa: E501

        :return: The responders of this CreateIncidentPayload.
        :rtype: List[Recipient]
        """
        return self._responders

    @responders.setter
    def responders(self, responders):
        """Sets the responders of this CreateIncidentPayload.

        Responders that the incident will be routed to send notifications  # noqa: E501

        :param responders: The responders of this CreateIncidentPayload.
        :type responders: List[Recipient]
        """

        self._responders = responders

    @property
    def tags(self):
        """Gets the tags of this CreateIncidentPayload.

        Tags of the incident.  # noqa: E501

        :return: The tags of this CreateIncidentPayload.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateIncidentPayload.

        Tags of the incident.  # noqa: E501

        :param tags: The tags of this CreateIncidentPayload.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def details(self):
        """Gets the details of this CreateIncidentPayload.

        Map of key-value pairs to use as custom properties of the incident  # noqa: E501

        :return: The details of this CreateIncidentPayload.
        :rtype: Dict[str, str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CreateIncidentPayload.

        Map of key-value pairs to use as custom properties of the incident  # noqa: E501

        :param details: The details of this CreateIncidentPayload.
        :type details: Dict[str, str]
        """

        self._details = details

    @property
    def priority(self):
        """Gets the priority of this CreateIncidentPayload.

        Priority level of the incident  # noqa: E501

        :return: The priority of this CreateIncidentPayload.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateIncidentPayload.

        Priority level of the incident  # noqa: E501

        :param priority: The priority of this CreateIncidentPayload.
        :type priority: str
        """
        allowed_values = ["P1", "P2", "P3", "P4", "P5"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def note(self):
        """Gets the note of this CreateIncidentPayload.

        Additional note that will be added while creating the incident  # noqa: E501

        :return: The note of this CreateIncidentPayload.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CreateIncidentPayload.

        Additional note that will be added while creating the incident  # noqa: E501

        :param note: The note of this CreateIncidentPayload.
        :type note: str
        """

        self._note = note

    @property
    def service_id(self):
        """Gets the service_id of this CreateIncidentPayload.

        Service on which incident will be created.  # noqa: E501

        :return: The service_id of this CreateIncidentPayload.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this CreateIncidentPayload.

        Service on which incident will be created.  # noqa: E501

        :param service_id: The service_id of this CreateIncidentPayload.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def status_page_entry(self):
        """Gets the status_page_entry of this CreateIncidentPayload.

        Status page entry fields. If this field is leaved blank, message and description of incident will be used for title and detail respectively.  # noqa: E501

        :return: The status_page_entry of this CreateIncidentPayload.
        :rtype: Dict[str, StatusPageEntry]
        """
        return self._status_page_entry

    @status_page_entry.setter
    def status_page_entry(self, status_page_entry):
        """Sets the status_page_entry of this CreateIncidentPayload.

        Status page entry fields. If this field is leaved blank, message and description of incident will be used for title and detail respectively.  # noqa: E501

        :param status_page_entry: The status_page_entry of this CreateIncidentPayload.
        :type status_page_entry: Dict[str, StatusPageEntry]
        """

        self._status_page_entry = status_page_entry

    @property
    def notify_stakeholders(self):
        """Gets the notify_stakeholders of this CreateIncidentPayload.

        Indicate whether stakeholders are notified or not. Default value is false.  # noqa: E501

        :return: The notify_stakeholders of this CreateIncidentPayload.
        :rtype: bool
        """
        return self._notify_stakeholders

    @notify_stakeholders.setter
    def notify_stakeholders(self, notify_stakeholders):
        """Sets the notify_stakeholders of this CreateIncidentPayload.

        Indicate whether stakeholders are notified or not. Default value is false.  # noqa: E501

        :param notify_stakeholders: The notify_stakeholders of this CreateIncidentPayload.
        :type notify_stakeholders: bool
        """

        self._notify_stakeholders = notify_stakeholders
