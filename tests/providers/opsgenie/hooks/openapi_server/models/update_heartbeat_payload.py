# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UpdateHeartbeatPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, interval=None, interval_unit=None, enabled=None):  # noqa: E501
        """UpdateHeartbeatPayload - a model defined in OpenAPI

        :param description: The description of this UpdateHeartbeatPayload.  # noqa: E501
        :type description: str
        :param interval: The interval of this UpdateHeartbeatPayload.  # noqa: E501
        :type interval: int
        :param interval_unit: The interval_unit of this UpdateHeartbeatPayload.  # noqa: E501
        :type interval_unit: str
        :param enabled: The enabled of this UpdateHeartbeatPayload.  # noqa: E501
        :type enabled: bool
        """
        self.openapi_types = {
            'description': str,
            'interval': int,
            'interval_unit': str,
            'enabled': bool
        }

        self.attribute_map = {
            'description': 'description',
            'interval': 'interval',
            'interval_unit': 'intervalUnit',
            'enabled': 'enabled'
        }

        self._description = description
        self._interval = interval
        self._interval_unit = interval_unit
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateHeartbeatPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateHeartbeatPayload of this UpdateHeartbeatPayload.  # noqa: E501
        :rtype: UpdateHeartbeatPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateHeartbeatPayload.

        An optional description of the heartbeat  # noqa: E501

        :return: The description of this UpdateHeartbeatPayload.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateHeartbeatPayload.

        An optional description of the heartbeat  # noqa: E501

        :param description: The description of this UpdateHeartbeatPayload.
        :type description: str
        """
        if description is not None and len(description) > 10000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")  # noqa: E501

        self._description = description

    @property
    def interval(self):
        """Gets the interval of this UpdateHeartbeatPayload.

        Specifies how often a heartbeat message should be expected  # noqa: E501

        :return: The interval of this UpdateHeartbeatPayload.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this UpdateHeartbeatPayload.

        Specifies how often a heartbeat message should be expected  # noqa: E501

        :param interval: The interval of this UpdateHeartbeatPayload.
        :type interval: int
        """
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def interval_unit(self):
        """Gets the interval_unit of this UpdateHeartbeatPayload.

        Interval specified as 'minutes', 'hours' or 'days'  # noqa: E501

        :return: The interval_unit of this UpdateHeartbeatPayload.
        :rtype: str
        """
        return self._interval_unit

    @interval_unit.setter
    def interval_unit(self, interval_unit):
        """Sets the interval_unit of this UpdateHeartbeatPayload.

        Interval specified as 'minutes', 'hours' or 'days'  # noqa: E501

        :param interval_unit: The interval_unit of this UpdateHeartbeatPayload.
        :type interval_unit: str
        """
        allowed_values = ["minutes", "hours", "days"]  # noqa: E501
        if interval_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `interval_unit` ({0}), must be one of {1}"
                .format(interval_unit, allowed_values)
            )

        self._interval_unit = interval_unit

    @property
    def enabled(self):
        """Gets the enabled of this UpdateHeartbeatPayload.

        Enable/disable heartbeat monitoring  # noqa: E501

        :return: The enabled of this UpdateHeartbeatPayload.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateHeartbeatPayload.

        Enable/disable heartbeat monitoring  # noqa: E501

        :param enabled: The enabled of this UpdateHeartbeatPayload.
        :type enabled: bool
        """

        self._enabled = enabled
