# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.base_response import BaseResponse
from openapi_server.models.list_heartbeat_response_all_of import ListHeartbeatResponseAllOf
from openapi_server.models.list_heartbeat_response_all_of_data import ListHeartbeatResponseAllOfData
from openapi_server import util

from openapi_server.models.base_response import BaseResponse  # noqa: E501
from openapi_server.models.list_heartbeat_response_all_of import ListHeartbeatResponseAllOf  # noqa: E501
from openapi_server.models.list_heartbeat_response_all_of_data import ListHeartbeatResponseAllOfData  # noqa: E501

class ListHeartbeatResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id=None, took=0.0, data=None):  # noqa: E501
        """ListHeartbeatResponse - a model defined in OpenAPI

        :param request_id: The request_id of this ListHeartbeatResponse.  # noqa: E501
        :type request_id: str
        :param took: The took of this ListHeartbeatResponse.  # noqa: E501
        :type took: float
        :param data: The data of this ListHeartbeatResponse.  # noqa: E501
        :type data: ListHeartbeatResponseAllOfData
        """
        self.openapi_types = {
            'request_id': str,
            'took': float,
            'data': ListHeartbeatResponseAllOfData
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'took': 'took',
            'data': 'data'
        }

        self._request_id = request_id
        self._took = took
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'ListHeartbeatResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ListHeartbeatResponse of this ListHeartbeatResponse.  # noqa: E501
        :rtype: ListHeartbeatResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this ListHeartbeatResponse.


        :return: The request_id of this ListHeartbeatResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ListHeartbeatResponse.


        :param request_id: The request_id of this ListHeartbeatResponse.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def took(self):
        """Gets the took of this ListHeartbeatResponse.


        :return: The took of this ListHeartbeatResponse.
        :rtype: float
        """
        return self._took

    @took.setter
    def took(self, took):
        """Sets the took of this ListHeartbeatResponse.


        :param took: The took of this ListHeartbeatResponse.
        :type took: float
        """
        if took is None:
            raise ValueError("Invalid value for `took`, must not be `None`")  # noqa: E501

        self._took = took

    @property
    def data(self):
        """Gets the data of this ListHeartbeatResponse.


        :return: The data of this ListHeartbeatResponse.
        :rtype: ListHeartbeatResponseAllOfData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ListHeartbeatResponse.


        :param data: The data of this ListHeartbeatResponse.
        :type data: ListHeartbeatResponseAllOfData
        """

        self._data = data
