# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class WeekdayTimeRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_day=None, start_hour=None, start_min=None, end_day=None, end_hour=None, end_min=None):  # noqa: E501
        """WeekdayTimeRestriction - a model defined in OpenAPI

        :param start_day: The start_day of this WeekdayTimeRestriction.  # noqa: E501
        :type start_day: str
        :param start_hour: The start_hour of this WeekdayTimeRestriction.  # noqa: E501
        :type start_hour: int
        :param start_min: The start_min of this WeekdayTimeRestriction.  # noqa: E501
        :type start_min: int
        :param end_day: The end_day of this WeekdayTimeRestriction.  # noqa: E501
        :type end_day: str
        :param end_hour: The end_hour of this WeekdayTimeRestriction.  # noqa: E501
        :type end_hour: int
        :param end_min: The end_min of this WeekdayTimeRestriction.  # noqa: E501
        :type end_min: int
        """
        self.openapi_types = {
            'start_day': str,
            'start_hour': int,
            'start_min': int,
            'end_day': str,
            'end_hour': int,
            'end_min': int
        }

        self.attribute_map = {
            'start_day': 'startDay',
            'start_hour': 'startHour',
            'start_min': 'startMin',
            'end_day': 'endDay',
            'end_hour': 'endHour',
            'end_min': 'endMin'
        }

        self._start_day = start_day
        self._start_hour = start_hour
        self._start_min = start_min
        self._end_day = end_day
        self._end_hour = end_hour
        self._end_min = end_min

    @classmethod
    def from_dict(cls, dikt) -> 'WeekdayTimeRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeekdayTimeRestriction of this WeekdayTimeRestriction.  # noqa: E501
        :rtype: WeekdayTimeRestriction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_day(self):
        """Gets the start_day of this WeekdayTimeRestriction.


        :return: The start_day of this WeekdayTimeRestriction.
        :rtype: str
        """
        return self._start_day

    @start_day.setter
    def start_day(self, start_day):
        """Sets the start_day of this WeekdayTimeRestriction.


        :param start_day: The start_day of this WeekdayTimeRestriction.
        :type start_day: str
        """
        allowed_values = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]  # noqa: E501
        if start_day not in allowed_values:
            raise ValueError(
                "Invalid value for `start_day` ({0}), must be one of {1}"
                .format(start_day, allowed_values)
            )

        self._start_day = start_day

    @property
    def start_hour(self):
        """Gets the start_hour of this WeekdayTimeRestriction.


        :return: The start_hour of this WeekdayTimeRestriction.
        :rtype: int
        """
        return self._start_hour

    @start_hour.setter
    def start_hour(self, start_hour):
        """Sets the start_hour of this WeekdayTimeRestriction.


        :param start_hour: The start_hour of this WeekdayTimeRestriction.
        :type start_hour: int
        """

        self._start_hour = start_hour

    @property
    def start_min(self):
        """Gets the start_min of this WeekdayTimeRestriction.


        :return: The start_min of this WeekdayTimeRestriction.
        :rtype: int
        """
        return self._start_min

    @start_min.setter
    def start_min(self, start_min):
        """Sets the start_min of this WeekdayTimeRestriction.


        :param start_min: The start_min of this WeekdayTimeRestriction.
        :type start_min: int
        """

        self._start_min = start_min

    @property
    def end_day(self):
        """Gets the end_day of this WeekdayTimeRestriction.


        :return: The end_day of this WeekdayTimeRestriction.
        :rtype: str
        """
        return self._end_day

    @end_day.setter
    def end_day(self, end_day):
        """Sets the end_day of this WeekdayTimeRestriction.


        :param end_day: The end_day of this WeekdayTimeRestriction.
        :type end_day: str
        """
        allowed_values = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]  # noqa: E501
        if end_day not in allowed_values:
            raise ValueError(
                "Invalid value for `end_day` ({0}), must be one of {1}"
                .format(end_day, allowed_values)
            )

        self._end_day = end_day

    @property
    def end_hour(self):
        """Gets the end_hour of this WeekdayTimeRestriction.


        :return: The end_hour of this WeekdayTimeRestriction.
        :rtype: int
        """
        return self._end_hour

    @end_hour.setter
    def end_hour(self, end_hour):
        """Sets the end_hour of this WeekdayTimeRestriction.


        :param end_hour: The end_hour of this WeekdayTimeRestriction.
        :type end_hour: int
        """

        self._end_hour = end_hour

    @property
    def end_min(self):
        """Gets the end_min of this WeekdayTimeRestriction.


        :return: The end_min of this WeekdayTimeRestriction.
        :rtype: int
        """
        return self._end_min

    @end_min.setter
    def end_min(self, end_min):
        """Sets the end_min of this WeekdayTimeRestriction.


        :param end_min: The end_min of this WeekdayTimeRestriction.
        :type end_min: int
        """

        self._end_min = end_min
